#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>


int getInt(	int *pValor, char *pMSG, char *pMSGErr,
			int rangoMin, int rangoMax, int retry)
{
	int retorno;
	int aux;

	retorno = -1;

	do
	{
		printf("%s",pMSG);
		__fpurge(stdin);
		scanf("%d",&aux);
		if(aux >= rangoMin && aux <= rangoMax)
		{	//then
			*pValor = aux;
			retorno = 0;	// VALIDA //
			break;
		}
		else
		{
			printf("%s",pMSGErr);
		}

		retry--;

	}while(retry >= 0);

	return retorno;
}

int initArrayInt(int *pArray, int limit, int valor)
{
	int retorno;
	int i;

	retorno = -1;

	if(pArray != NULL && limit > 0)
	{
		for(i=0; i<limit; i++)
		{
			pArray[i]=valor;
		}

		retorno = 0;	// VALIDA //
	}

	return retorno;
}

int printeoArrayInt(int *pArray, int limit)
{
	int retorno;
	int i;

	retorno = -1;

	if(pArray != NULL && limit > 0) 	// VALIDA && EXECUTA //
	{
		for(i=0;i<limit;i++)
		{
			printf("\n%i",pArray[i]); // try \t between \n & %i, not sure que hace //
		}
		retorno = 0;		// VALIDA //
	}
	return retorno;
}

int cargaArrayInt(	int *pArray, int limit, char *pMSG,
					char *pMSGErr, int rangoMin, int rangoMax,
					int retry)
{
	int retorno;
	int aux;
	int i;
	char sn;

	retorno = -1;

	if(pArray != NULL && limit > 0)
	{
		do
		{

			if(getInt(&aux, pMSG, pMSGErr, rangoMin, rangoMax, retry) == 0)
			{   //then ---
				pArray[i] = aux;
				i++;
				if(i == limit)
				{
					break;
				}
			}

			printf("\nContinuar? (s/n)");
			__fpurge(stdin); // fflush(stdin) en Windows, papá! ---
			scanf("%c",&sn);

		}while(sn != 'n');

		retorno = i;
	}

	return retorno;
}

int OrdenaArrayInt(int* pArray, int limit)
{
	int retorno;
    int i;
	int aux;
	int orderFlag;
    int* arrayAux = pArray;

    retorno = -1;
    orderFlag = 0;

    while(orderFlag == 0)
    {
    	orderFlag = 1; // Si no entra al if, está ordenado, so, ends while //
        for(i=0; i<(limit-1); i++)
        {
           if(arrayAux[i]>arrayAux[i+1])
           {
        	   aux = arrayAux[i];
        	   arrayAux[i]=arrayAux[i+1];
        	   arrayAux[i+1]=aux;
        	   orderFlag = 0;
           }
        }
    }

    pArray = arrayAux;

    return retorno;
}

int sumaArrayInt(int* pArray, int limit, int* resultado)
{
	int retorno;
	int flag;		// flag de validacion, perro //
    int auxResultado;
    int i;

    retorno = -1;
    flag = 0;

    for (i=0; i<limit; i++)
    {
        auxResultado = auxResultado + pArray[i];
        flag = 1;
    }

    if (flag == 1)	// VALIDA //
    {
    	retorno = 0;
    }

    *resultado = auxResultado;

   return retorno;
}

int restaArrayInt(int* pArray, int limit, int* resultado)
{
	int retorno;
	int flag;		// flag de validacion, perro //
    int auxResultado;
    int i;

    retorno = -1;
    flag = 0;

    for (i=0; i<limit; i++)
    {
        auxResultado = auxResultado - pArray[i];
        flag = 1;
    }

    if (flag == 1)	// VALIDA //
    {
    	retorno = 0;
    }

    *resultado = auxResultado;

   return retorno;
}

int multiplicaArrayInt(int* pArray, int limit, int* resultado)
{
	int retorno;
	int flag;		// flag de validacion, perro //
    int auxResultado;
    int i;

    retorno = -1;
    flag = 0;

    for (i=0; i<limit; i++)
    {
        auxResultado = auxResultado * pArray[i];
        flag = 1;
    }

    if (flag == 1)	// VALIDA //
    {
    	retorno = 0;
    }

    *resultado = auxResultado;

   return retorno;
}

int divideArrayInt(int* pArray, int limit, int* resultado) // FALTA VALIDAR POR 0 //
{
	int retorno;
	int flag;		// flag de validacion, perro //
    int auxResultado;
    int i;

    retorno = -1;
    flag = 0;

    for (i=0; i<limit; i++)
    {
    	if (pArray[i] != 0 && pArray[i] != '\0')
    	{
    		auxResultado = auxResultado / pArray[i];
    		flag = 1;
    	}
    	else
    	{
    		retorno = -2; // Valor de retorno si divido por 0 //
    	}

    }

    if (retorno != 2 && flag == 1)	// VALIDA //
    {
    	retorno = 0;
    }

    *resultado = auxResultado;

   return retorno;
}

int maxMinArrayInt(int* pArray, int limite, int* min, int* max)
{
    int retorno;
	int valorMin=*min;
    int valorMax=*max;
    int i;

    retorno = -1;

    for (i=0; i<limite; i++)
    {
        if(i==0){
            valorMin=pArray[i];
            valorMax=pArray[i];
        }
        else
        {
            if (pArray[i]<min){
                min=pArray[i];
            }
            if (pArray[i]>max){
                max=pArray[i];
            }
        }
    }
    *min = valorMin;
    *max = valorMax;

   return 0;
}

int promedioArrayInt(int* pArray, int limit, int* valorProm)
{
	int retorno;
    int aux;
    int i;

    retorno = -1;


    for (i=0; i<limit; i++)
    {
    	if (pArray[i] != '\0')
    	{	//then
    		aux = aux + pArray[i];
    		retorno = 0;
    	}
    }

    *valorProm = aux/limit;

   return retorno;
}










